/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BaseConfigInstance {
    #[serde(rename = "object")]
    pub object: Object,
    /// ID of the config instance
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "target_status")]
    pub target_status: models::ConfigInstanceTargetStatus,
    #[serde(rename = "status")]
    pub status: models::ConfigInstanceStatus,
    #[serde(rename = "activity_status")]
    pub activity_status: models::ConfigInstanceActivityStatus,
    #[serde(rename = "error_status")]
    pub error_status: models::ConfigInstanceErrorStatus,
    /// The file path to deploy the config instance relative to /srv/miru/config_instances. v1/motion-control.json would deploy to /srv/miru/config_instances/v1/motion-control.json
    #[serde(rename = "relative_filepath", deserialize_with = "Option::deserialize")]
    pub relative_filepath: Option<String>,
    /// The timestamp when the config instance was created
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// The timestamp when the config instance was last updated
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// The ID of the config schema which the config instance must adhere to
    #[serde(rename = "config_schema_id")]
    pub config_schema_id: String,
    /// The ID of the config type which the config instance is a part of
    #[serde(rename = "config_type_id")]
    pub config_type_id: String,
}

impl BaseConfigInstance {
    pub fn new(
        object: Object,
        id: String,
        target_status: models::ConfigInstanceTargetStatus,
        status: models::ConfigInstanceStatus,
        activity_status: models::ConfigInstanceActivityStatus,
        error_status: models::ConfigInstanceErrorStatus,
        relative_filepath: Option<String>,
        created_at: String,
        updated_at: String,
        config_schema_id: String,
        config_type_id: String,
    ) -> BaseConfigInstance {
        BaseConfigInstance {
            object,
            id,
            target_status,
            status,
            activity_status,
            error_status,
            relative_filepath,
            created_at,
            updated_at,
            config_schema_id,
            config_type_id,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "config_instance")]
    ConfigInstance,
}

impl Default for Object {
    fn default() -> Object {
        Self::ConfigInstance
    }
}
