/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TagType {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    #[serde(rename = "created_by_id", deserialize_with = "Option::deserialize")]
    pub created_by_id: Option<String>,
    #[serde(rename = "updated_by_id", deserialize_with = "Option::deserialize")]
    pub updated_by_id: Option<String>,
    #[serde(rename = "created_by", deserialize_with = "Option::deserialize")]
    pub created_by: Option<Box<models::User>>,
    #[serde(rename = "updated_by", deserialize_with = "Option::deserialize")]
    pub updated_by: Option<Box<models::User>>,
    #[serde(rename = "schema", deserialize_with = "Option::deserialize")]
    pub schema: Option<serde_json::Value>,
    #[serde(rename = "tags", deserialize_with = "Option::deserialize")]
    pub tags: Option<Box<models::TagList>>,
}

impl TagType {
    pub fn new(
        object: Object,
        id: String,
        name: String,
        created_at: String,
        updated_at: String,
        created_by_id: Option<String>,
        updated_by_id: Option<String>,
        created_by: Option<models::User>,
        updated_by: Option<models::User>,
        schema: Option<serde_json::Value>,
        tags: Option<models::TagList>,
    ) -> TagType {
        TagType {
            object,
            id,
            name,
            created_at,
            updated_at,
            created_by_id,
            updated_by_id,
            created_by: if let Some(x) = created_by {
                Some(Box::new(x))
            } else {
                None
            },
            updated_by: if let Some(x) = updated_by {
                Some(Box::new(x))
            } else {
                None
            },
            schema,
            tags: if let Some(x) = tags {
                Some(Box::new(x))
            } else {
                None
            },
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "tag_type")]
    TagType,
}

impl Default for Object {
    fn default() -> Object {
        Self::TagType
    }
}
