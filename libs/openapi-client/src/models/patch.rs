/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Patch {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "base_instance_id")]
    pub base_instance_id: String,
    #[serde(rename = "patched_instance_id")]
    pub patched_instance_id: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "created_by_id", deserialize_with = "Option::deserialize")]
    pub created_by_id: Option<String>,
    #[serde(rename = "created_by", deserialize_with = "Option::deserialize")]
    pub created_by: Option<Box<models::User>>,
    #[serde(rename = "base_instance", deserialize_with = "Option::deserialize")]
    pub base_instance: Option<Box<models::BackendConfigInstance>>,
    #[serde(rename = "patched_instance", deserialize_with = "Option::deserialize")]
    pub patched_instance: Option<Box<models::BackendConfigInstance>>,
    #[serde(rename = "comments", deserialize_with = "Option::deserialize")]
    pub comments: Option<Box<models::PatchCommentList>>,
}

impl Patch {
    pub fn new(
        object: Object,
        id: String,
        description: String,
        base_instance_id: String,
        patched_instance_id: String,
        created_at: String,
        created_by_id: Option<String>,
        created_by: Option<models::User>,
        base_instance: Option<models::BackendConfigInstance>,
        patched_instance: Option<models::BackendConfigInstance>,
        comments: Option<models::PatchCommentList>,
    ) -> Patch {
        Patch {
            object,
            id,
            description,
            base_instance_id,
            patched_instance_id,
            created_at,
            created_by_id,
            created_by: if let Some(x) = created_by {
                Some(Box::new(x))
            } else {
                None
            },
            base_instance: if let Some(x) = base_instance {
                Some(Box::new(x))
            } else {
                None
            },
            patched_instance: if let Some(x) = patched_instance {
                Some(Box::new(x))
            } else {
                None
            },
            comments: if let Some(x) = comments {
                Some(Box::new(x))
            } else {
                None
            },
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "patch")]
    Patch,
}

impl Default for Object {
    fn default() -> Object {
        Self::Patch
    }
}
