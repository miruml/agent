/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BackendConfigInstance {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "device_id")]
    pub device_id: String,
    #[serde(rename = "config_schema_id")]
    pub config_schema_id: String,
    #[serde(rename = "config_instance", deserialize_with = "Option::deserialize")]
    pub config_instance: Option<serde_json::Value>,
}

impl BackendConfigInstance {
    pub fn new(
        object: Object,
        id: String,
        created_at: String,
        device_id: String,
        config_schema_id: String,
        config_instance: Option<serde_json::Value>,
    ) -> BackendConfigInstance {
        BackendConfigInstance {
            object,
            id,
            created_at,
            device_id,
            config_schema_id,
            config_instance,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "config_instance")]
    ConfigInstance,
}

impl Default for Object {
    fn default() -> Object {
        Self::ConfigInstance
    }
}
