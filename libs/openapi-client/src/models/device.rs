/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Device {
    #[serde(rename = "object")]
    pub object: Object,
    /// ID of the device
    #[serde(rename = "id")]
    pub id: String,
    /// Name of the device
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "status")]
    pub status: models::DeviceStatus,
    /// Timestamp of when the device was created
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// Timestamp of when the device was last updated
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    #[serde(rename = "created_by_id")]
    pub created_by_id: String,
    #[serde(rename = "updated_by_id")]
    pub updated_by_id: String,
    #[serde(rename = "created_by", deserialize_with = "Option::deserialize")]
    pub created_by: Option<Box<models::Principal>>,
    #[serde(rename = "updated_by", deserialize_with = "Option::deserialize")]
    pub updated_by: Option<Box<models::Principal>>,
    #[serde(rename = "device_tags", deserialize_with = "Option::deserialize")]
    pub device_tags: Option<Box<models::DeviceTagPaginatedList>>,
}

impl Device {
    pub fn new(
        object: Object,
        id: String,
        name: String,
        status: models::DeviceStatus,
        created_at: String,
        updated_at: String,
        created_by_id: String,
        updated_by_id: String,
        created_by: Option<models::Principal>,
        updated_by: Option<models::Principal>,
        device_tags: Option<models::DeviceTagPaginatedList>,
    ) -> Device {
        Device {
            object,
            id,
            name,
            status,
            created_at,
            updated_at,
            created_by_id,
            updated_by_id,
            created_by: created_by.map(Box::new),
            updated_by: updated_by.map(Box::new),
            device_tags: device_tags.map(Box::new),
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "device")]
    Device,
}

impl Default for Object {
    fn default() -> Object {
        Self::Device
    }
}
