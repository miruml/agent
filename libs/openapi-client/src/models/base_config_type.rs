/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BaseConfigType {
    #[serde(rename = "object")]
    pub object: Object,
    /// ID of the config type
    #[serde(rename = "id")]
    pub id: String,
    /// Name of the config type
    #[serde(rename = "name")]
    pub name: String,
    /// An immutable, code-friendly name for the config type
    #[serde(rename = "slug")]
    pub slug: String,
    /// Timestamp of when the config type was created
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// Timestamp of when the config type was last updated
    #[serde(rename = "updated_at")]
    pub updated_at: String,
}

impl BaseConfigType {
    pub fn new(
        object: Object,
        id: String,
        name: String,
        slug: String,
        created_at: String,
        updated_at: String,
    ) -> BaseConfigType {
        BaseConfigType {
            object,
            id,
            name,
            slug,
            created_at,
            updated_at,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "config_type")]
    ConfigType,
}

impl Default for Object {
    fn default() -> Object {
        Self::ConfigType
    }
}
