/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConfigSchemaSearch {
    #[serde(rename = "id")]
    CONFIG_SCHEMA_SEARCH_ID,
    #[serde(rename = "version")]
    CONFIG_SCHEMA_SEARCH_VERSION,
    #[serde(rename = "digest")]
    CONFIG_SCHEMA_SEARCH_DIGEST,
    #[serde(rename = "config_type_id")]
    CONFIG_SCHEMA_SEARCH_CONFIG_TYPE_ID,
    #[serde(rename = "config_type_slug")]
    CONFIG_SCHEMA_SEARCH_CONFIG_TYPE_SLUG,
    #[serde(rename = "commit_sha")]
    CONFIG_SCHEMA_SEARCH_COMMIT_SHA,
    #[serde(rename = "repository_name")]
    CONFIG_SCHEMA_SEARCH_REPOSITORY_NAME,
    #[serde(rename = "branch")]
    CONFIG_SCHEMA_SEARCH_BRANCH,
}

impl std::fmt::Display for ConfigSchemaSearch {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::CONFIG_SCHEMA_SEARCH_ID => write!(f, "id"),
            Self::CONFIG_SCHEMA_SEARCH_VERSION => write!(f, "version"),
            Self::CONFIG_SCHEMA_SEARCH_DIGEST => write!(f, "digest"),
            Self::CONFIG_SCHEMA_SEARCH_CONFIG_TYPE_ID => write!(f, "config_type_id"),
            Self::CONFIG_SCHEMA_SEARCH_CONFIG_TYPE_SLUG => write!(f, "config_type_slug"),
            Self::CONFIG_SCHEMA_SEARCH_COMMIT_SHA => write!(f, "commit_sha"),
            Self::CONFIG_SCHEMA_SEARCH_REPOSITORY_NAME => write!(f, "repository_name"),
            Self::CONFIG_SCHEMA_SEARCH_BRANCH => write!(f, "branch"),
        }
    }
}

impl Default for ConfigSchemaSearch {
    fn default() -> ConfigSchemaSearch {
        Self::CONFIG_SCHEMA_SEARCH_ID
    }
}
