/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitCommit {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "sha")]
    pub sha: String,
    #[serde(rename = "message")]
    pub message: String,
    #[serde(rename = "branch")]
    pub branch: String,
    #[serde(rename = "repository_owner")]
    pub repository_owner: String,
    #[serde(rename = "repository_name")]
    pub repository_name: String,
    #[serde(rename = "repository_type")]
    pub repository_type: models::GitRepositoryType,
    #[serde(rename = "repository_url")]
    pub repository_url: String,
    #[serde(rename = "branch_url")]
    pub branch_url: String,
    #[serde(rename = "commit_url")]
    pub commit_url: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "created_by_id")]
    pub created_by_id: String,
    #[serde(rename = "created_by", deserialize_with = "Option::deserialize")]
    pub created_by: Option<Box<models::Principal>>,
    #[serde(
        rename = "config_schema_git_commits",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub config_schema_git_commits: Option<Option<Box<models::ConfigSchemaGitCommitList>>>,
}

impl GitCommit {
    pub fn new(
        object: Object,
        id: String,
        sha: String,
        message: String,
        branch: String,
        repository_owner: String,
        repository_name: String,
        repository_type: models::GitRepositoryType,
        repository_url: String,
        branch_url: String,
        commit_url: String,
        created_at: String,
        created_by_id: String,
        created_by: Option<models::Principal>,
    ) -> GitCommit {
        GitCommit {
            object,
            id,
            sha,
            message,
            branch,
            repository_owner,
            repository_name,
            repository_type,
            repository_url,
            branch_url,
            commit_url,
            created_at,
            created_by_id,
            created_by: created_by.map(Box::new),
            config_schema_git_commits: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "git_commit")]
    GitCommit,
}

impl Default for Object {
    fn default() -> Object {
        Self::GitCommit
    }
}
