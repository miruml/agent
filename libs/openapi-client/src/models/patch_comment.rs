/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PatchComment {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "text")]
    pub text: String,
    #[serde(rename = "parameter_path")]
    pub parameter_path: Vec<String>,
    #[serde(rename = "patch_id")]
    pub patch_id: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "created_by_id", deserialize_with = "Option::deserialize")]
    pub created_by_id: Option<String>,
    #[serde(rename = "created_by", deserialize_with = "Option::deserialize")]
    pub created_by: Option<Box<models::User>>,
}

impl PatchComment {
    pub fn new(
        object: Object,
        id: String,
        text: String,
        parameter_path: Vec<String>,
        patch_id: String,
        created_at: String,
        created_by_id: Option<String>,
        created_by: Option<models::User>,
    ) -> PatchComment {
        PatchComment {
            object,
            id,
            text,
            parameter_path,
            patch_id,
            created_at,
            created_by_id,
            created_by: if let Some(x) = created_by {
                Some(Box::new(x))
            } else {
                None
            },
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "patch_comment")]
    PatchComment,
}

impl Default for Object {
    fn default() -> Object {
        Self::PatchComment
    }
}
