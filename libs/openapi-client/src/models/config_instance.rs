/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigInstance {
    #[serde(rename = "object")]
    pub object: Object,
    /// ID of the config instance
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "target_status")]
    pub target_status: models::ConfigInstanceTargetStatus,
    #[serde(rename = "activity_status")]
    pub activity_status: models::ConfigInstanceActivityStatus,
    #[serde(rename = "error_status")]
    pub error_status: models::ConfigInstanceErrorStatus,
    #[serde(rename = "status")]
    pub status: models::ConfigInstanceStatus,
    /// The file path to deploy the config instance relative to `/srv/miru/config_instances`. `v1/motion-control.json` would deploy to `/srv/miru/config_instances/v1/motion-control.json`
    #[serde(rename = "relative_filepath")]
    pub relative_filepath: String,
    /// The timestamp of when the config instance was created
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// The timestamp of when the config instance was last updated
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// ID of the device which the config instance is deployed to
    #[serde(rename = "device_id")]
    pub device_id: String,
    /// ID of the config schema which the config instance must adhere to
    #[serde(rename = "config_schema_id")]
    pub config_schema_id: String,
    /// ID of the config type which the config instance (and its schema) is a part of
    #[serde(rename = "config_type_id")]
    pub config_type_id: String,
    #[serde(rename = "created_by_id")]
    pub created_by_id: String,
    #[serde(rename = "updated_by_id")]
    pub updated_by_id: String,
    #[serde(rename = "patch_id", deserialize_with = "Option::deserialize")]
    pub patch_id: Option<String>,
    #[serde(rename = "created_by", deserialize_with = "Option::deserialize")]
    pub created_by: Option<Box<models::Principal>>,
    #[serde(rename = "updated_by", deserialize_with = "Option::deserialize")]
    pub updated_by: Option<Box<models::Principal>>,
    #[serde(rename = "patch", deserialize_with = "Option::deserialize")]
    pub patch: Option<Box<models::Patch>>,
    #[serde(rename = "device", deserialize_with = "Option::deserialize")]
    pub device: Option<Box<models::Device>>,
    /// Expand the config schema using 'expand[]=config_schema' in the query string
    #[serde(rename = "config_schema", deserialize_with = "Option::deserialize")]
    pub config_schema: Option<Box<models::ConfigSchema>>,
    /// Expand the config type using 'expand[]=config_type' in the query string
    #[serde(rename = "config_type", deserialize_with = "Option::deserialize")]
    pub config_type: Option<Box<models::ConfigType>>,
    /// The configuration values associated with the config instance
    #[serde(rename = "content", deserialize_with = "Option::deserialize")]
    pub content: Option<serde_json::Value>,
    #[serde(rename = "validation", deserialize_with = "Option::deserialize")]
    pub validation: Option<Box<models::ConfigInstanceValidation>>,
}

impl ConfigInstance {
    pub fn new(
        object: Object,
        id: String,
        target_status: models::ConfigInstanceTargetStatus,
        activity_status: models::ConfigInstanceActivityStatus,
        error_status: models::ConfigInstanceErrorStatus,
        status: models::ConfigInstanceStatus,
        relative_filepath: String,
        created_at: String,
        updated_at: String,
        device_id: String,
        config_schema_id: String,
        config_type_id: String,
        created_by_id: String,
        updated_by_id: String,
        patch_id: Option<String>,
        created_by: Option<models::Principal>,
        updated_by: Option<models::Principal>,
        patch: Option<models::Patch>,
        device: Option<models::Device>,
        config_schema: Option<models::ConfigSchema>,
        config_type: Option<models::ConfigType>,
        content: Option<serde_json::Value>,
        validation: Option<models::ConfigInstanceValidation>,
    ) -> ConfigInstance {
        ConfigInstance {
            object,
            id,
            target_status,
            activity_status,
            error_status,
            status,
            relative_filepath,
            created_at,
            updated_at,
            device_id,
            config_schema_id,
            config_type_id,
            created_by_id,
            updated_by_id,
            patch_id,
            created_by: created_by.map(Box::new),
            updated_by: updated_by.map(Box::new),
            patch: patch.map(Box::new),
            device: device.map(Box::new),
            config_schema: config_schema.map(Box::new),
            config_type: config_type.map(Box::new),
            content,
            validation: validation.map(Box::new),
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "config_instance")]
    ConfigInstance,
}

impl Default for Object {
    fn default() -> Object {
        Self::ConfigInstance
    }
}
