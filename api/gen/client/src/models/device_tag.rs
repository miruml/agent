/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeviceTag {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "created_by_id")]
    pub created_by_id: String,
    #[serde(rename = "device_id")]
    pub device_id: String,
    #[serde(rename = "tag_id")]
    pub tag_id: String,
    #[serde(rename = "created_by", deserialize_with = "Option::deserialize")]
    pub created_by: Option<Box<models::Principal>>,
    #[serde(rename = "device", deserialize_with = "Option::deserialize")]
    pub device: Option<Box<models::Device>>,
    #[serde(rename = "tag", deserialize_with = "Option::deserialize")]
    pub tag: Option<Box<models::Tag>>,
}

impl DeviceTag {
    pub fn new(object: Object, id: String, created_at: String, created_by_id: String, device_id: String, tag_id: String, created_by: Option<models::Principal>, device: Option<models::Device>, tag: Option<models::Tag>) -> DeviceTag {
        DeviceTag {
            object,
            id,
            created_at,
            created_by_id,
            device_id,
            tag_id,
            created_by: if let Some(x) = created_by {Some(Box::new(x))} else {None},
            device: if let Some(x) = device {Some(Box::new(x))} else {None},
            tag: if let Some(x) = tag {Some(Box::new(x))} else {None},
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "device_tag")]
    DeviceTag,
}

impl Default for Object {
    fn default() -> Object {
        Self::DeviceTag
    }
}

