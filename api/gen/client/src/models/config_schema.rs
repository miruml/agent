/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigSchema {
    #[serde(rename = "object")]
    pub object: Object,
    /// ID of the config schema
    #[serde(rename = "id")]
    pub id: String,
    /// Config schema version for the config type
    #[serde(rename = "version")]
    pub version: i32,
    /// Hash of the config schema contents
    #[serde(rename = "digest")]
    pub digest: String,
    /// The file path to deploy the config instance relative to `/srv/miru/config_instances`. `v1/motion-control.json` would deploy to `/srv/miru/config_instances/v1/motion-control.json`
    #[serde(rename = "relative_filepath")]
    pub relative_filepath: String,
    /// Timestamp of when the config schema was created
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// Timestamp of when the config schema was last updated
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// ID of the config type
    #[serde(rename = "config_type_id")]
    pub config_type_id: String,
    /// The config schema's JSON Schema definition
    #[serde(rename = "content", deserialize_with = "Option::deserialize")]
    pub content: Option<serde_json::Value>,
    #[serde(rename = "created_by_id")]
    pub created_by_id: String,
    #[serde(rename = "updated_by_id")]
    pub updated_by_id: String,
    #[serde(rename = "created_by", deserialize_with = "Option::deserialize")]
    pub created_by: Option<Box<models::Principal>>,
    #[serde(rename = "updated_by", deserialize_with = "Option::deserialize")]
    pub updated_by: Option<Box<models::Principal>>,
    #[serde(rename = "config_schema_git_commits", deserialize_with = "Option::deserialize")]
    pub config_schema_git_commits: Option<Box<models::ConfigSchemaGitCommitList>>,
    /// Expand the config type using 'expand[]=config_type' in the query string
    #[serde(rename = "config_type", deserialize_with = "Option::deserialize")]
    pub config_type: Option<Box<models::ConfigType>>,
}

impl ConfigSchema {
    pub fn new(object: Object, id: String, version: i32, digest: String, relative_filepath: String, created_at: String, updated_at: String, config_type_id: String, content: Option<serde_json::Value>, created_by_id: String, updated_by_id: String, created_by: Option<models::Principal>, updated_by: Option<models::Principal>, config_schema_git_commits: Option<models::ConfigSchemaGitCommitList>, config_type: Option<models::ConfigType>) -> ConfigSchema {
        ConfigSchema {
            object,
            id,
            version,
            digest,
            relative_filepath,
            created_at,
            updated_at,
            config_type_id,
            content,
            created_by_id,
            updated_by_id,
            created_by: if let Some(x) = created_by {Some(Box::new(x))} else {None},
            updated_by: if let Some(x) = updated_by {Some(Box::new(x))} else {None},
            config_schema_git_commits: if let Some(x) = config_schema_git_commits {Some(Box::new(x))} else {None},
            config_type: if let Some(x) = config_type {Some(Box::new(x))} else {None},
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "config_schema")]
    ConfigSchema,
}

impl Default for Object {
    fn default() -> Object {
        Self::ConfigSchema
    }
}

