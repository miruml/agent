/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BaseDevice {
    #[serde(rename = "object")]
    pub object: Object,
    /// ID of the device
    #[serde(rename = "id")]
    pub id: String,
    /// Name of the device
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "status")]
    pub status: models::DeviceStatus,
    /// Timestamp of when the device was created
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// Timestamp of when the device was last updated
    #[serde(rename = "updated_at")]
    pub updated_at: String,
}

impl BaseDevice {
    pub fn new(object: Object, id: String, name: String, status: models::DeviceStatus, created_at: String, updated_at: String) -> BaseDevice {
        BaseDevice {
            object,
            id,
            name,
            status,
            created_at,
            updated_at,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "device")]
    Device,
}

impl Default for Object {
    fn default() -> Object {
        Self::Device
    }
}

