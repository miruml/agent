/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiKey {
    #[serde(rename = "object")]
    pub object: Object,
    /// ID of the API key
    #[serde(rename = "id")]
    pub id: String,
    /// Name of the API key
    #[serde(rename = "name")]
    pub name: String,
    /// Timestamp of when the API key was created
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// Timestamp of when the API key was last updated
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// ID of the user who created the API key
    #[serde(rename = "created_by_id")]
    pub created_by_id: String,
    /// ID of the user who last updated the API key
    #[serde(rename = "updated_by_id")]
    pub updated_by_id: String,
    #[serde(rename = "created_by", deserialize_with = "Option::deserialize")]
    pub created_by: Option<Box<models::User>>,
    #[serde(rename = "updated_by", deserialize_with = "Option::deserialize")]
    pub updated_by: Option<Box<models::User>>,
    #[serde(rename = "scopes", deserialize_with = "Option::deserialize")]
    pub scopes: Option<Box<models::ScopeList>>,
}

impl ApiKey {
    pub fn new(object: Object, id: String, name: String, created_at: String, updated_at: String, created_by_id: String, updated_by_id: String, created_by: Option<models::User>, updated_by: Option<models::User>, scopes: Option<models::ScopeList>) -> ApiKey {
        ApiKey {
            object,
            id,
            name,
            created_at,
            updated_at,
            created_by_id,
            updated_by_id,
            created_by: if let Some(x) = created_by {Some(Box::new(x))} else {None},
            updated_by: if let Some(x) = updated_by {Some(Box::new(x))} else {None},
            scopes: if let Some(x) = scopes {Some(Box::new(x))} else {None},
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "api_key")]
    ApiKey,
}

impl Default for Object {
    fn default() -> Object {
        Self::ApiKey
    }
}

