/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BaseConfigInstance {
    #[serde(rename = "object")]
    pub object: Object,
    /// ID of the config instance
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "target_status")]
    pub target_status: models::ConfigInstanceTargetStatus,
    #[serde(rename = "activity_status")]
    pub activity_status: models::ConfigInstanceActivityStatus,
    #[serde(rename = "error_status")]
    pub error_status: models::ConfigInstanceErrorStatus,
    #[serde(rename = "status")]
    pub status: models::ConfigInstanceStatus,
    /// The file path to deploy the config instance relative to `/srv/miru/config_instances`. `v1/motion-control.json` would deploy to `/srv/miru/config_instances/v1/motion-control.json`
    #[serde(rename = "relative_filepath")]
    pub relative_filepath: String,
    /// The timestamp of when the config instance was created
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// The timestamp of when the config instance was last updated
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// ID of the device which the config instance is deployed to
    #[serde(rename = "device_id")]
    pub device_id: String,
    /// ID of the config schema which the config instance must adhere to
    #[serde(rename = "config_schema_id")]
    pub config_schema_id: String,
    /// ID of the config type which the config instance (and its schema) is a part of
    #[serde(rename = "config_type_id")]
    pub config_type_id: String,
}

impl BaseConfigInstance {
    pub fn new(object: Object, id: String, target_status: models::ConfigInstanceTargetStatus, activity_status: models::ConfigInstanceActivityStatus, error_status: models::ConfigInstanceErrorStatus, status: models::ConfigInstanceStatus, relative_filepath: String, created_at: String, updated_at: String, device_id: String, config_schema_id: String, config_type_id: String) -> BaseConfigInstance {
        BaseConfigInstance {
            object,
            id,
            target_status,
            activity_status,
            error_status,
            status,
            relative_filepath,
            created_at,
            updated_at,
            device_id,
            config_schema_id,
            config_type_id,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "config_instance")]
    ConfigInstance,
}

impl Default for Object {
    fn default() -> Object {
        Self::ConfigInstance
    }
}

