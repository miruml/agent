/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SyncDeviceResponse {
    #[serde(rename = "code")]
    pub code: models::SyncDeviceResult,
    /// The message of the result.
    #[serde(rename = "message")]
    pub message: String,
    /// Timestamp of when the device was last synced
    #[serde(rename = "last_synced_at")]
    pub last_synced_at: String,
    /// Timestamp of when the last *attempted* sync occurred
    #[serde(rename = "last_attempted_sync_at")]
    pub last_attempted_sync_at: String,
    /// Whether the device is currently in cooldown
    #[serde(rename = "is_cooling_down")]
    pub is_cooling_down: bool,
    /// Timestamp of when the cooldown will end
    #[serde(rename = "cooldown_ends_at")]
    pub cooldown_ends_at: String,
}

impl SyncDeviceResponse {
    pub fn new(code: models::SyncDeviceResult, message: String, last_synced_at: String, last_attempted_sync_at: String, is_cooling_down: bool, cooldown_ends_at: String) -> SyncDeviceResponse {
        SyncDeviceResponse {
            code,
            message,
            last_synced_at,
            last_attempted_sync_at,
            is_cooling_down,
            cooldown_ends_at,
        }
    }
}

