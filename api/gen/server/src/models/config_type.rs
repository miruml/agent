/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigType {
    #[serde(rename = "object")]
    pub object: Object,
    /// ID of the config type
    #[serde(rename = "id")]
    pub id: String,
    /// Name of the config type
    #[serde(rename = "name")]
    pub name: String,
    /// Slug of the config type
    #[serde(rename = "slug")]
    pub slug: String,
    /// Timestamp of when the config type was created
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// Timestamp of when the config type was last updated
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// Expand the config schemas using 'expand[]=config_schemas' in the query string
    #[serde(rename = "config_schemas", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub config_schemas: Option<Option<Box<models::ConfigSchemaList>>>,
    #[serde(rename = "created_by_id", deserialize_with = "Option::deserialize")]
    pub created_by_id: Option<String>,
    #[serde(rename = "updated_by_id", deserialize_with = "Option::deserialize")]
    pub updated_by_id: Option<String>,
    #[serde(rename = "created_by", deserialize_with = "Option::deserialize")]
    pub created_by: Option<Box<models::User>>,
    #[serde(rename = "updated_by", deserialize_with = "Option::deserialize")]
    pub updated_by: Option<Box<models::User>>,
}

impl ConfigType {
    pub fn new(object: Object, id: String, name: String, slug: String, created_at: String, updated_at: String, created_by_id: Option<String>, updated_by_id: Option<String>, created_by: Option<models::User>, updated_by: Option<models::User>) -> ConfigType {
        ConfigType {
            object,
            id,
            name,
            slug,
            created_at,
            updated_at,
            config_schemas: None,
            created_by_id,
            updated_by_id,
            created_by: if let Some(x) = created_by {Some(Box::new(x))} else {None},
            updated_by: if let Some(x) = updated_by {Some(Box::new(x))} else {None},
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "config_type")]
    ConfigType,
}

impl Default for Object {
    fn default() -> Object {
        Self::ConfigType
    }
}

