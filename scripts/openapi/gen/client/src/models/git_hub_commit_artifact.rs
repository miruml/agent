/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitHubCommitArtifact {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "status")]
    pub status: String,
    #[serde(rename = "ready")]
    pub ready: bool,
    #[serde(rename = "failed")]
    pub failed: bool,
    #[serde(rename = "in_progress")]
    pub in_progress: bool,
}

impl GitHubCommitArtifact {
    pub fn new(id: String, object: Object, status: String, ready: bool, failed: bool, in_progress: bool) -> GitHubCommitArtifact {
        GitHubCommitArtifact {
            id,
            object,
            status,
            ready,
            failed,
            in_progress,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "artifact")]
    Artifact,
}

impl Default for Object {
    fn default() -> Object {
        Self::Artifact
    }
}

