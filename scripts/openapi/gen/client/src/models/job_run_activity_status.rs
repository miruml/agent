/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum JobRunActivityStatus {
    #[serde(rename = "queued")]
    JOB_RUN_ACTIVITY_STATUS_QUEUED,
    #[serde(rename = "downloading")]
    JOB_RUN_ACTIVITY_STATUS_DOWNLOADING,
    #[serde(rename = "downloaded")]
    JOB_RUN_ACTIVITY_STATUS_DOWNLOADED,
    #[serde(rename = "running")]
    JOB_RUN_ACTIVITY_STATUS_RUNNING,
    #[serde(rename = "ran")]
    JOB_RUN_ACTIVITY_STATUS_RAN,
    #[serde(rename = "uploading")]
    JOB_RUN_ACTIVITY_STATUS_UPLOADING,
    #[serde(rename = "uploaded")]
    JOB_RUN_ACTIVITY_STATUS_UPLOADED,
    #[serde(rename = "removing")]
    JOB_RUN_ACTIVITY_STATUS_REMOVING,
    #[serde(rename = "archived")]
    JOB_RUN_ACTIVITY_STATUS_ARCHIVED,

}

impl std::fmt::Display for JobRunActivityStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::JOB_RUN_ACTIVITY_STATUS_QUEUED => write!(f, "queued"),
            Self::JOB_RUN_ACTIVITY_STATUS_DOWNLOADING => write!(f, "downloading"),
            Self::JOB_RUN_ACTIVITY_STATUS_DOWNLOADED => write!(f, "downloaded"),
            Self::JOB_RUN_ACTIVITY_STATUS_RUNNING => write!(f, "running"),
            Self::JOB_RUN_ACTIVITY_STATUS_RAN => write!(f, "ran"),
            Self::JOB_RUN_ACTIVITY_STATUS_UPLOADING => write!(f, "uploading"),
            Self::JOB_RUN_ACTIVITY_STATUS_UPLOADED => write!(f, "uploaded"),
            Self::JOB_RUN_ACTIVITY_STATUS_REMOVING => write!(f, "removing"),
            Self::JOB_RUN_ACTIVITY_STATUS_ARCHIVED => write!(f, "archived"),
        }
    }
}

impl Default for JobRunActivityStatus {
    fn default() -> JobRunActivityStatus {
        Self::JOB_RUN_ACTIVITY_STATUS_QUEUED
    }
}

