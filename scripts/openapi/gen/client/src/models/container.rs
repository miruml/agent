/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Container {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "device_id")]
    pub device_id: String,
    #[serde(rename = "image_id", deserialize_with = "Option::deserialize")]
    pub image_id: Option<String>,
    #[serde(rename = "image_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub image_name: Option<Option<String>>,
    #[serde(rename = "image_tag", deserialize_with = "Option::deserialize")]
    pub image_tag: Option<String>,
    #[serde(rename = "image_digest", deserialize_with = "Option::deserialize")]
    pub image_digest: Option<String>,
    #[serde(rename = "docker_container_id")]
    pub docker_container_id: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    #[serde(rename = "started_at")]
    pub started_at: String,
    #[serde(rename = "finished_at", deserialize_with = "Option::deserialize")]
    pub finished_at: Option<String>,
    #[serde(rename = "status")]
    pub status: models::ContainerStatus,
    #[serde(rename = "target_status")]
    pub target_status: models::ContainerTargetStatus,
    #[serde(rename = "exit_code")]
    pub exit_code: i32,
    #[serde(rename = "error", deserialize_with = "Option::deserialize")]
    pub error: Option<String>,
}

impl Container {
    pub fn new(object: Object, id: String, device_id: String, image_id: Option<String>, image_tag: Option<String>, image_digest: Option<String>, docker_container_id: String, created_at: String, updated_at: String, started_at: String, finished_at: Option<String>, status: models::ContainerStatus, target_status: models::ContainerTargetStatus, exit_code: i32, error: Option<String>) -> Container {
        Container {
            object,
            id,
            device_id,
            image_id,
            image_name: None,
            image_tag,
            image_digest,
            docker_container_id,
            created_at,
            updated_at,
            started_at,
            finished_at,
            status,
            target_status,
            exit_code,
            error,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "container")]
    Container,
}

impl Default for Object {
    fn default() -> Object {
        Self::Container
    }
}

