/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`create_registry_source`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateRegistrySourceError {
    Status400(models::InvalidComposeFile),
    Status404(models::RepositoryNotFound),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_registry_source`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteRegistrySourceError {
    Status404(models::SchemasError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_registry_source`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRegistrySourceError {
    Status404(models::SchemasError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_registry_source_compose_file`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRegistrySourceComposeFileError {
    Status404(models::SchemasError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_registry_sources`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRegistrySourcesError {
    Status404(models::SchemasError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_registry_source`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateRegistrySourceError {
    Status400(models::InvalidComposeFile),
    Status404(models::RepositoryNotFound),
    UnknownValue(serde_json::Value),
}


pub async fn create_registry_source(configuration: &configuration::Configuration, workspace_id: &str, create_registry_source_request: models::CreateRegistrySourceRequest) -> Result<models::RegistrySource, Error<CreateRegistrySourceError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_workspace_id = workspace_id;
    let p_create_registry_source_request = create_registry_source_request;

    let uri_str = format!("{}/workspaces/{workspace_id}/sources/registry", configuration.base_path, workspace_id=crate::apis::urlencode(p_workspace_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_create_registry_source_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrySource`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrySource`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateRegistrySourceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn delete_registry_source(configuration: &configuration::Configuration, registry_source_id: &str) -> Result<models::RegistrySource, Error<DeleteRegistrySourceError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_registry_source_id = registry_source_id;

    let uri_str = format!("{}/sources/registry/{registry_source_id}", configuration.base_path, registry_source_id=crate::apis::urlencode(p_registry_source_id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrySource`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrySource`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteRegistrySourceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_registry_source(configuration: &configuration::Configuration, registry_source_id: &str) -> Result<models::RegistrySource, Error<GetRegistrySourceError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_registry_source_id = registry_source_id;

    let uri_str = format!("{}/sources/registry/{registry_source_id}", configuration.base_path, registry_source_id=crate::apis::urlencode(p_registry_source_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrySource`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrySource`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetRegistrySourceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_registry_source_compose_file(configuration: &configuration::Configuration, registry_source_id: &str) -> Result<models::ComposeFile, Error<GetRegistrySourceComposeFileError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_registry_source_id = registry_source_id;

    let uri_str = format!("{}/sources/registry/{registry_source_id}/compose_file", configuration.base_path, registry_source_id=crate::apis::urlencode(p_registry_source_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ComposeFile`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ComposeFile`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetRegistrySourceComposeFileError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_registry_sources(configuration: &configuration::Configuration, workspace_id: &str) -> Result<models::RegistrySourceList, Error<GetRegistrySourcesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_workspace_id = workspace_id;

    let uri_str = format!("{}/workspaces/{workspace_id}/sources/registry", configuration.base_path, workspace_id=crate::apis::urlencode(p_workspace_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrySourceList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrySourceList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetRegistrySourcesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn update_registry_source(configuration: &configuration::Configuration, registry_source_id: &str, update_registry_source_request: models::UpdateRegistrySourceRequest) -> Result<models::RegistrySource, Error<UpdateRegistrySourceError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_registry_source_id = registry_source_id;
    let p_update_registry_source_request = update_registry_source_request;

    let uri_str = format!("{}/sources/registry/{registry_source_id}", configuration.base_path, registry_source_id=crate::apis::urlencode(p_registry_source_id));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_update_registry_source_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrySource`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrySource`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateRegistrySourceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

