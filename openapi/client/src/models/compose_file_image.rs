/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComposeFileImage {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "compose_reference")]
    pub compose_reference: String,
    #[serde(rename = "image_uri")]
    pub image_uri: String,
    #[serde(rename = "repository_uri")]
    pub repository_uri: String,
    #[serde(rename = "registry_url")]
    pub registry_url: String,
    #[serde(rename = "registry_type")]
    pub registry_type: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "digest")]
    pub digest: String,
    #[serde(rename = "tag")]
    pub tag: String,
    #[serde(rename = "is_image_valid")]
    pub is_image_valid: bool,
    #[serde(rename = "is_repository_valid")]
    pub is_repository_valid: bool,
    #[serde(rename = "error")]
    pub error: String,
}

impl ComposeFileImage {
    pub fn new(
        object: Object,
        compose_reference: String,
        image_uri: String,
        repository_uri: String,
        registry_url: String,
        registry_type: String,
        name: String,
        digest: String,
        tag: String,
        is_image_valid: bool,
        is_repository_valid: bool,
        error: String,
    ) -> ComposeFileImage {
        ComposeFileImage {
            object,
            compose_reference,
            image_uri,
            repository_uri,
            registry_url,
            registry_type,
            name,
            digest,
            tag,
            is_image_valid,
            is_repository_valid,
            error,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "external_image")]
    ExternalImage,
}

impl Default for Object {
    fn default() -> Object {
        Self::ExternalImage
    }
}
