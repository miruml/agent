/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// BaseDevice : A device object
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BaseDevice {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "hardware")]
    pub hardware: models::HardwareType,
    #[serde(rename = "operating_system", deserialize_with = "Option::deserialize")]
    pub operating_system: Option<String>,
    #[serde(rename = "architecture", deserialize_with = "Option::deserialize")]
    pub architecture: Option<String>,
    #[serde(rename = "status")]
    pub status: models::DeviceStatus,
    #[serde(rename = "last_reported_status")]
    pub last_reported_status: String,
    #[serde(rename = "miru_version", deserialize_with = "Option::deserialize")]
    pub miru_version: Option<String>,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "synced_at")]
    pub synced_at: String,
    #[serde(rename = "workspace_id")]
    pub workspace_id: String,
}

impl BaseDevice {
    /// A device object
    pub fn new(
        object: Object,
        id: String,
        name: String,
        hardware: models::HardwareType,
        operating_system: Option<String>,
        architecture: Option<String>,
        status: models::DeviceStatus,
        last_reported_status: String,
        miru_version: Option<String>,
        created_at: String,
        synced_at: String,
        workspace_id: String,
    ) -> BaseDevice {
        BaseDevice {
            object,
            id,
            name,
            hardware,
            operating_system,
            architecture,
            status,
            last_reported_status,
            miru_version,
            created_at,
            synced_at,
            workspace_id,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "device")]
    Device,
}

impl Default for Object {
    fn default() -> Object {
        Self::Device
    }
}
