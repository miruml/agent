/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateConfigSchemaRequest {
    /// The config id
    #[serde(
        rename = "config_id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub config_id: Option<Option<String>>,
    /// The config slug
    #[serde(
        rename = "config_slug",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub config_slug: Option<Option<String>>,
    #[serde(rename = "schema")]
    pub schema: serde_json::Value,
    #[serde(rename = "git_commit", deserialize_with = "Option::deserialize")]
    pub git_commit: Option<Box<models::GitCommitRequest>>,
}

impl CreateConfigSchemaRequest {
    pub fn new(
        schema: serde_json::Value,
        git_commit: Option<models::GitCommitRequest>,
    ) -> CreateConfigSchemaRequest {
        CreateConfigSchemaRequest {
            config_id: None,
            config_slug: None,
            schema,
            git_commit: git_commit.map(Box::new),
        }
    }
}
