/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BaseArtifact {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "status")]
    pub status: models::ArtifactStatus,
    #[serde(rename = "digest")]
    pub digest: String,
    #[serde(rename = "aarch64")]
    pub aarch64: bool,
    #[serde(rename = "x86_64")]
    pub x86_64: bool,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "ready_at", deserialize_with = "Option::deserialize")]
    pub ready_at: Option<String>,
    #[serde(rename = "failed_at", deserialize_with = "Option::deserialize")]
    pub failed_at: Option<String>,
    #[serde(rename = "source_id")]
    pub source_id: String,
    #[serde(rename = "source_type")]
    pub source_type: models::ArtifactSourceType,
}

impl BaseArtifact {
    pub fn new(
        object: Object,
        id: String,
        status: models::ArtifactStatus,
        digest: String,
        aarch64: bool,
        x86_64: bool,
        created_at: String,
        ready_at: Option<String>,
        failed_at: Option<String>,
        source_id: String,
        source_type: models::ArtifactSourceType,
    ) -> BaseArtifact {
        BaseArtifact {
            object,
            id,
            status,
            digest,
            aarch64,
            x86_64,
            created_at,
            ready_at,
            failed_at,
            source_id,
            source_type,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "artifact")]
    Artifact,
}

impl Default for Object {
    fn default() -> Object {
        Self::Artifact
    }
}
