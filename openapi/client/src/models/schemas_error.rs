/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SchemasError {
    /// A unique error code that identifies the type of error
    #[serde(rename = "code")]
    pub code: String,
    /// A human-readable error message
    #[serde(rename = "message")]
    pub message: String,
    /// Additional error details (optional)
    #[serde(rename = "details", skip_serializing_if = "Option::is_none")]
    pub details: Option<std::collections::HashMap<String, serde_json::Value>>,
}

impl SchemasError {
    pub fn new(code: String, message: String) -> SchemasError {
        SchemasError {
            code,
            message,
            details: None,
        }
    }
}

