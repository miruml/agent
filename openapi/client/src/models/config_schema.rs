/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigSchema {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "version")]
    pub version: i32,
    #[serde(rename = "digest")]
    pub digest: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "created_by_id", deserialize_with = "Option::deserialize")]
    pub created_by_id: Option<String>,
    #[serde(rename = "config_id")]
    pub config_id: String,
    #[serde(rename = "created_by", deserialize_with = "Option::deserialize")]
    pub created_by: Option<Box<models::User>>,
    #[serde(rename = "schema", deserialize_with = "Option::deserialize")]
    pub schema: Option<serde_json::Value>,
    #[serde(rename = "config", deserialize_with = "Option::deserialize")]
    pub config: Option<Box<models::Config>>,
    #[serde(
        rename = "config_schema_git_commits",
        deserialize_with = "Option::deserialize"
    )]
    pub config_schema_git_commits: Option<Box<models::ConfigSchemaGitCommitList>>,
    #[serde(rename = "overrides", deserialize_with = "Option::deserialize")]
    pub overrides: Option<Box<models::OverrideList>>,
}

impl ConfigSchema {
    pub fn new(
        object: Object,
        id: String,
        version: i32,
        digest: String,
        created_at: String,
        created_by_id: Option<String>,
        config_id: String,
        created_by: Option<models::User>,
        schema: Option<serde_json::Value>,
        config: Option<models::Config>,
        config_schema_git_commits: Option<models::ConfigSchemaGitCommitList>,
        overrides: Option<models::OverrideList>,
    ) -> ConfigSchema {
        ConfigSchema {
            object,
            id,
            version,
            digest,
            created_at,
            created_by_id,
            config_id,
            created_by: created_by.map(Box::new),
            schema,
            config: config.map(Box::new),
            config_schema_git_commits: config_schema_git_commits.map(Box::new),
            overrides: overrides.map(Box::new),
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "config_schema")]
    ConfigSchema,
}

impl Default for Object {
    fn default() -> Object {
        Self::ConfigSchema
    }
}
