/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigSchemaGitCommit {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "file_path")]
    pub file_path: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "git_commit_id")]
    pub git_commit_id: String,
    #[serde(rename = "config_schema_id")]
    pub config_schema_id: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "created_by_id", deserialize_with = "Option::deserialize")]
    pub created_by_id: Option<String>,
    #[serde(rename = "created_by", deserialize_with = "Option::deserialize")]
    pub created_by: Option<Box<models::User>>,
    #[serde(rename = "git_commit", deserialize_with = "Option::deserialize")]
    pub git_commit: Option<Box<models::GitCommit>>,
    #[serde(rename = "config_schema", deserialize_with = "Option::deserialize")]
    pub config_schema: Option<Box<models::ConfigSchema>>,
}

impl ConfigSchemaGitCommit {
    pub fn new(object: Object, file_path: String, url: String, git_commit_id: String, config_schema_id: String, created_at: String, created_by_id: Option<String>, created_by: Option<models::User>, git_commit: Option<models::GitCommit>, config_schema: Option<models::ConfigSchema>) -> ConfigSchemaGitCommit {
        ConfigSchemaGitCommit {
            object,
            file_path,
            url,
            git_commit_id,
            config_schema_id,
            created_at,
            created_by_id,
            created_by: if let Some(x) = created_by {Some(Box::new(x))} else {None},
            git_commit: if let Some(x) = git_commit {Some(Box::new(x))} else {None},
            config_schema: if let Some(x) = config_schema {Some(Box::new(x))} else {None},
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "config_schema_git_commit")]
    ConfigSchemaGitCommit,
}

impl Default for Object {
    fn default() -> Object {
        Self::ConfigSchemaGitCommit
    }
}

