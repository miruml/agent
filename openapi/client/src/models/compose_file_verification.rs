/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComposeFileVerification {
    #[serde(rename = "object")]
    pub object: String,
    #[serde(rename = "content")]
    pub content: String,
    #[serde(rename = "is_valid")]
    pub is_valid: bool,
    #[serde(rename = "is_schema_valid")]
    pub is_schema_valid: bool,
    #[serde(rename = "schema_error", skip_serializing_if = "Option::is_none")]
    pub schema_error: Option<String>,
    #[serde(rename = "images")]
    pub images: Box<models::ComposeFileImageList>,
}

impl ComposeFileVerification {
    pub fn new(object: String, content: String, is_valid: bool, is_schema_valid: bool, images: models::ComposeFileImageList) -> ComposeFileVerification {
        ComposeFileVerification {
            object,
            content,
            is_valid,
            is_schema_valid,
            schema_error: None,
            images: Box::new(images),
        }
    }
}

