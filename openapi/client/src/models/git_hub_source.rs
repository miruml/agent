/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitHubSource {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "repository_id")]
    pub repository_id: i64,
    #[serde(rename = "repository_name")]
    pub repository_name: String,
    #[serde(rename = "branch")]
    pub branch: String,
    #[serde(rename = "build_path")]
    pub build_path: String,
    #[serde(rename = "deleted")]
    pub deleted: bool,
}

impl GitHubSource {
    pub fn new(id: String, object: Object, name: String, repository_id: i64, repository_name: String, branch: String, build_path: String, deleted: bool) -> GitHubSource {
        GitHubSource {
            id,
            object,
            name,
            repository_id,
            repository_name,
            branch,
            build_path,
            deleted,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "github_source")]
    GithubSource,
}

impl Default for Object {
    fn default() -> Object {
        Self::GithubSource
    }
}

