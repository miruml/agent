/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientTag {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "created_by_id", deserialize_with = "Option::deserialize")]
    pub created_by_id: Option<String>,
    #[serde(rename = "client_id", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    #[serde(rename = "tag_id", skip_serializing_if = "Option::is_none")]
    pub tag_id: Option<String>,
    #[serde(rename = "created_by", deserialize_with = "Option::deserialize")]
    pub created_by: Option<Box<models::User>>,
    #[serde(rename = "client", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub client: Option<Option<Box<models::Client>>>,
    #[serde(rename = "tag", deserialize_with = "Option::deserialize")]
    pub tag: Option<Box<models::Tag>>,
}

impl ClientTag {
    pub fn new(object: Object, created_at: String, created_by_id: Option<String>, created_by: Option<models::User>, tag: Option<models::Tag>) -> ClientTag {
        ClientTag {
            object,
            created_at,
            created_by_id,
            client_id: None,
            tag_id: None,
            created_by: if let Some(x) = created_by {Some(Box::new(x))} else {None},
            client: None,
            tag: if let Some(x) = tag {Some(Box::new(x))} else {None},
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "client_tag")]
    ClientTag,
}

impl Default for Object {
    fn default() -> Object {
        Self::ClientTag
    }
}

