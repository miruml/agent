/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Artifact {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "status")]
    pub status: models::ArtifactStatus,
    #[serde(rename = "digest")]
    pub digest: String,
    #[serde(rename = "aarch64")]
    pub aarch64: bool,
    #[serde(rename = "x86_64")]
    pub x86_64: bool,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "ready_at", deserialize_with = "Option::deserialize")]
    pub ready_at: Option<String>,
    #[serde(rename = "failed_at", deserialize_with = "Option::deserialize")]
    pub failed_at: Option<String>,
    #[serde(rename = "source_id")]
    pub source_id: String,
    #[serde(rename = "source_type")]
    pub source_type: models::ArtifactSourceType,
    #[serde(rename = "created_by", deserialize_with = "Option::deserialize")]
    pub created_by: Option<Box<models::User>>,
    #[serde(rename = "registry_source", deserialize_with = "Option::deserialize")]
    pub registry_source: Option<Box<models::RegistrySource>>,
    #[serde(rename = "github_source", deserialize_with = "Option::deserialize")]
    pub github_source: Option<Box<models::GitHubSource>>,
    #[serde(rename = "github_source_data", deserialize_with = "Option::deserialize")]
    pub github_source_data: Option<Box<models::GitHubSourceData>>,
    #[serde(rename = "images")]
    pub images: Box<models::ImageList>,
}

impl Artifact {
    pub fn new(object: Object, id: String, status: models::ArtifactStatus, digest: String, aarch64: bool, x86_64: bool, created_at: String, ready_at: Option<String>, failed_at: Option<String>, source_id: String, source_type: models::ArtifactSourceType, created_by: Option<models::User>, registry_source: Option<models::RegistrySource>, github_source: Option<models::GitHubSource>, github_source_data: Option<models::GitHubSourceData>, images: models::ImageList) -> Artifact {
        Artifact {
            object,
            id,
            status,
            digest,
            aarch64,
            x86_64,
            created_at,
            ready_at,
            failed_at,
            source_id,
            source_type,
            created_by: if let Some(x) = created_by {Some(Box::new(x))} else {None},
            registry_source: if let Some(x) = registry_source {Some(Box::new(x))} else {None},
            github_source: if let Some(x) = github_source {Some(Box::new(x))} else {None},
            github_source_data: if let Some(x) = github_source_data {Some(Box::new(x))} else {None},
            images: Box::new(images),
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "artifact")]
    Artifact,
}

impl Default for Object {
    fn default() -> Object {
        Self::Artifact
    }
}

