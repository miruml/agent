/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RenderedKeyValuePair {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "value_exists")]
    pub value_exists: bool,
    #[serde(rename = "value", deserialize_with = "Option::deserialize")]
    pub value: Option<serde_json::Value>,
    #[serde(rename = "value_source", deserialize_with = "Option::deserialize")]
    pub value_source: Option<models::RenderedKeyValuePairValueSource>,
    #[serde(
        rename = "missing_value_explanation",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub missing_value_explanation: Option<Option<String>>,
    #[serde(rename = "config_schema_path")]
    pub config_schema_path: Vec<String>,
    #[serde(rename = "is_valid")]
    pub is_valid: bool,
    #[serde(rename = "validation_error", deserialize_with = "Option::deserialize")]
    pub validation_error: Option<Box<models::Error>>,
    #[serde(
        rename = "override_key_value_pair_id",
        deserialize_with = "Option::deserialize"
    )]
    pub override_key_value_pair_id: Option<String>,
    #[serde(
        rename = "override_key_value_pair",
        deserialize_with = "Option::deserialize"
    )]
    pub override_key_value_pair: Option<Box<models::OverrideKeyValuePair>>,
    #[serde(rename = "tag_id", deserialize_with = "Option::deserialize")]
    pub tag_id: Option<String>,
    #[serde(rename = "tag", deserialize_with = "Option::deserialize")]
    pub tag: Option<Box<models::Tag>>,
}

impl RenderedKeyValuePair {
    pub fn new(
        object: Object,
        value_exists: bool,
        value: Option<serde_json::Value>,
        value_source: Option<models::RenderedKeyValuePairValueSource>,
        config_schema_path: Vec<String>,
        is_valid: bool,
        validation_error: Option<models::Error>,
        override_key_value_pair_id: Option<String>,
        override_key_value_pair: Option<models::OverrideKeyValuePair>,
        tag_id: Option<String>,
        tag: Option<models::Tag>,
    ) -> RenderedKeyValuePair {
        RenderedKeyValuePair {
            object,
            value_exists,
            value,
            value_source,
            missing_value_explanation: None,
            config_schema_path,
            is_valid,
            validation_error: validation_error.map(Box::new),
            override_key_value_pair_id,
            override_key_value_pair: override_key_value_pair.map(Box::new),
            tag_id,
            tag: tag.map(Box::new),
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "rendered_key_value_pair")]
    RenderedKeyValuePair,
}

impl Default for Object {
    fn default() -> Object {
        Self::RenderedKeyValuePair
    }
}
