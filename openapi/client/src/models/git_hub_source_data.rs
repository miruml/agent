/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitHubSourceData {
    #[serde(rename = "sender")]
    pub sender: Box<models::GitHubSourceDataSender>,
    #[serde(rename = "branch")]
    pub branch: String,
    #[serde(rename = "build_path")]
    pub build_path: String,
    #[serde(rename = "repository")]
    pub repository: Box<models::GitHubSourceDataRepository>,
    #[serde(rename = "head_commit")]
    pub head_commit: Box<models::GitHubSourceDataHeadCommit>,
}

impl GitHubSourceData {
    pub fn new(sender: models::GitHubSourceDataSender, branch: String, build_path: String, repository: models::GitHubSourceDataRepository, head_commit: models::GitHubSourceDataHeadCommit) -> GitHubSourceData {
        GitHubSourceData {
            sender: Box::new(sender),
            branch,
            build_path,
            repository: Box::new(repository),
            head_commit: Box::new(head_commit),
        }
    }
}

