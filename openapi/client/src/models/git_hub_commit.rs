/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitHubCommit {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "sha")]
    pub sha: String,
    #[serde(rename = "message")]
    pub message: String,
    #[serde(rename = "html_url")]
    pub html_url: String,
    #[serde(rename = "pushed_at")]
    pub pushed_at: String,
    #[serde(rename = "committer")]
    pub committer: Box<models::GitHubCommitter>,
    #[serde(rename = "artifacts", skip_serializing_if = "Option::is_none")]
    pub artifacts: Option<Box<models::GitHubCommitArtifactList>>,
}

impl GitHubCommit {
    pub fn new(object: Object, sha: String, message: String, html_url: String, pushed_at: String, committer: models::GitHubCommitter) -> GitHubCommit {
        GitHubCommit {
            object,
            sha,
            message,
            html_url,
            pushed_at,
            committer: Box::new(committer),
            artifacts: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "github_commit")]
    GithubCommit,
}

impl Default for Object {
    fn default() -> Object {
        Self::GithubCommit
    }
}

