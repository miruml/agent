/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitHubSourceCommits {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "repository")]
    pub repository: Box<models::GitHubRepository>,
    #[serde(rename = "branch")]
    pub branch: String,
    #[serde(rename = "commits")]
    pub commits: Box<models::GitHubCommitList>,
}

impl GitHubSourceCommits {
    pub fn new(
        object: Object,
        repository: models::GitHubRepository,
        branch: String,
        commits: models::GitHubCommitList,
    ) -> GitHubSourceCommits {
        GitHubSourceCommits {
            object,
            repository: Box::new(repository),
            branch,
            commits: Box::new(commits),
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "github_source_commits")]
    GithubSourceCommits,
}

impl Default for Object {
    fn default() -> Object {
        Self::GithubSourceCommits
    }
}
