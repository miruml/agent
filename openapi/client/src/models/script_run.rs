/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScriptRun {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "script_id")]
    pub script_id: String,
    #[serde(rename = "stdout", deserialize_with = "Option::deserialize")]
    pub stdout: Option<String>,
    #[serde(rename = "stderr", deserialize_with = "Option::deserialize")]
    pub stderr: Option<String>,
    #[serde(rename = "exit_code", deserialize_with = "Option::deserialize")]
    pub exit_code: Option<i32>,
    #[serde(rename = "status")]
    pub status: models::ScriptRunStatus,
    #[serde(rename = "activity_status")]
    pub activity_status: models::ScriptRunActivityStatus,
    #[serde(rename = "error_status")]
    pub error_status: models::ScriptRunErrorStatus,
    #[serde(rename = "success")]
    pub success: bool,
    #[serde(rename = "failed")]
    pub failed: bool,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "downloading_at", deserialize_with = "Option::deserialize")]
    pub downloading_at: Option<String>,
    #[serde(rename = "downloaded_at", deserialize_with = "Option::deserialize")]
    pub downloaded_at: Option<String>,
    #[serde(rename = "running_at", deserialize_with = "Option::deserialize")]
    pub running_at: Option<String>,
    #[serde(rename = "ran_at", deserialize_with = "Option::deserialize")]
    pub ran_at: Option<String>,
    #[serde(rename = "uploading_at", deserialize_with = "Option::deserialize")]
    pub uploading_at: Option<String>,
    #[serde(rename = "uploaded_at", deserialize_with = "Option::deserialize")]
    pub uploaded_at: Option<String>,
    #[serde(rename = "removing_at", deserialize_with = "Option::deserialize")]
    pub removing_at: Option<String>,
    #[serde(rename = "archived_at", deserialize_with = "Option::deserialize")]
    pub archived_at: Option<String>,
}

impl ScriptRun {
    pub fn new(object: Object, id: String, script_id: String, stdout: Option<String>, stderr: Option<String>, exit_code: Option<i32>, status: models::ScriptRunStatus, activity_status: models::ScriptRunActivityStatus, error_status: models::ScriptRunErrorStatus, success: bool, failed: bool, created_at: String, downloading_at: Option<String>, downloaded_at: Option<String>, running_at: Option<String>, ran_at: Option<String>, uploading_at: Option<String>, uploaded_at: Option<String>, removing_at: Option<String>, archived_at: Option<String>) -> ScriptRun {
        ScriptRun {
            object,
            id,
            script_id,
            stdout,
            stderr,
            exit_code,
            status,
            activity_status,
            error_status,
            success,
            failed,
            created_at,
            downloading_at,
            downloaded_at,
            running_at,
            ran_at,
            uploading_at,
            uploaded_at,
            removing_at,
            archived_at,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "script_run")]
    ScriptRun,
}

impl Default for Object {
    fn default() -> Object {
        Self::ScriptRun
    }
}

