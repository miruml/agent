/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RegistrySource {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "repositories")]
    pub repositories: Box<models::RegistrySourceContainerRepositoryList>,
    #[serde(rename = "aarch64")]
    pub aarch64: bool,
    #[serde(rename = "x86_64")]
    pub x86_64: bool,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
}

impl RegistrySource {
    pub fn new(id: String, object: Object, name: String, repositories: models::RegistrySourceContainerRepositoryList, aarch64: bool, x86_64: bool, created_at: String, updated_at: String) -> RegistrySource {
        RegistrySource {
            id,
            object,
            name,
            repositories: Box::new(repositories),
            aarch64,
            x86_64,
            created_at,
            updated_at,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "registry_source")]
    RegistrySource,
}

impl Default for Object {
    fn default() -> Object {
        Self::RegistrySource
    }
}

