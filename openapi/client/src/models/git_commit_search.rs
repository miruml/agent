/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum GitCommitSearch {
    #[serde(rename = "commit_sha")]
    GIT_COMMIT_SEARCH_COMMIT_SHA,
    #[serde(rename = "repository_name")]
    GIT_COMMIT_SEARCH_REPOSITORY_NAME,
    #[serde(rename = "branch")]
    GIT_COMMIT_SEARCH_BRANCH,
    #[serde(rename = "config")]
    GIT_COMMIT_SEARCH_CONFIG,
    #[serde(rename = "config_schema")]
    GIT_COMMIT_SEARCH_CONFIG_SCHEMA,
}

impl std::fmt::Display for GitCommitSearch {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::GIT_COMMIT_SEARCH_COMMIT_SHA => write!(f, "commit_sha"),
            Self::GIT_COMMIT_SEARCH_REPOSITORY_NAME => write!(f, "repository_name"),
            Self::GIT_COMMIT_SEARCH_BRANCH => write!(f, "branch"),
            Self::GIT_COMMIT_SEARCH_CONFIG => write!(f, "config"),
            Self::GIT_COMMIT_SEARCH_CONFIG_SCHEMA => write!(f, "config_schema"),
        }
    }
}

impl Default for GitCommitSearch {
    fn default() -> GitCommitSearch {
        Self::GIT_COMMIT_SEARCH_COMMIT_SHA
    }
}
